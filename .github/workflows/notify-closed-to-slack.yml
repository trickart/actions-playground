name: Notify Closed Issues to Slack

on:
  workflow_dispatch:

jobs:
  notify-closed-issues:
    runs-on: ubuntu-latest

    steps:
    - name: fetch project cards
      uses: octokit/graphql-action@v2.x
      id: fetch
      with:
        query: |
          query($owner: String!, $project: Int!) {
            user(login: $owner) {
              projectV2(number: $project) {
                items(last: 100) {
                  nodes {
                    type
                    content {
                      ... on Issue {
                        title
                        url
                        author {
                          login
                        }
                        state
                      }
                      ... on PullRequest {
                        title
                        url
                        author {
                          login
                        }
                        state
                      }
                    }
                  }
                }
              }
            }
          }
        variables: |
          owner: ${{ github.event.repository.owner.login }}
          project: 2
      env:
        GITHUB_TOKEN: ${{ secrets.USER_LEVEL_PROJECT_READ_TOKEN }}
    - name: checkout
      uses: actions/checkout@v4
    - name: make payload
      uses: actions/github-script@v7
      id: make_payload
      with:
        result-encoding: string
        script: |
          const json = ${{ steps.fetch.outputs.data }};

          const filtered = json.user.projectV2.items.nodes.flatMap(node =>
            (node.content.state === 'CLOSED' || node.content.state === 'MERGED') ? {
              "title": node.content.title,
              "url": node.content.url,
              "author": node.content.author.login,
            } : []
          );

          const fs = require('fs');
          const users = JSON.parse(fs.readFileSync('users.json', 'utf8'));

          const body = filtered
            .map(issue =>  {
              const author = issue.author;
              let name;
              if (author in users) {
                name = `<@${users[author]}>`;
              } else {
                name = issue.author;
              }
              return `${issue.title} by ${name}\n${issue.url}`;
            })
            .join('\n');

          const payload = {
            "text": body,
            "unfurl_links": false,
            "unfurl_media": false,
          };
          return JSON.stringify(payload);
    - name: post to slack
      uses: slackapi/slack-github-action@v1.27.0
      with:
        channel-id: C07V3QMNDHS
        payload: ${{ steps.make_payload.outputs.result }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
